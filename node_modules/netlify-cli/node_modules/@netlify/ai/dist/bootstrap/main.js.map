{"version":3,"sources":["../../src/bootstrap/main.ts"],"sourcesContent":["import type { NetlifyAPI } from '@netlify/api'\n\nexport interface AIGatewayContext {\n  token: string\n  url: string\n}\n\nexport interface AIGatewayConfig {\n  api: NetlifyAPI\n  env: Record<string, { sources: string[]; value: string }>\n  siteID: string | undefined\n  siteURL: string | undefined\n}\n\nexport interface AIProviderEnvVar {\n  key: string\n  url: string\n}\n\nexport interface AIGatewayTokenResponse {\n  token: string\n  url: string\n  envVars?: AIProviderEnvVar[]\n}\n\nexport interface AIProvider {\n  token_env_var: string\n  url_env_var: string\n  models: string[]\n}\n\nexport interface ProvidersResponse {\n  providers: Record<string, AIProvider>\n}\n\nconst isValidTokenResponse = (data: unknown): data is AIGatewayTokenResponse => {\n  return (\n    typeof data === 'object' &&\n    data !== null &&\n    typeof (data as Record<string, unknown>).token === 'string' &&\n    typeof (data as Record<string, unknown>).url === 'string'\n  )\n}\n\nconst isValidProvidersResponse = (data: unknown): data is ProvidersResponse => {\n  return (\n    typeof data === 'object' &&\n    data !== null &&\n    typeof (data as Record<string, unknown>).providers === 'object' &&\n    (data as Record<string, unknown>).providers !== null\n  )\n}\n\nexport const fetchAIProviders = async ({ api }: { api: NetlifyAPI }): Promise<AIProviderEnvVar[]> => {\n  try {\n    if (!api.accessToken) {\n      return []\n    }\n\n    const url = `${api.scheme}://${api.host}/api/v1/ai-gateway/providers`\n\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${api.accessToken}`,\n        'Content-Type': 'application/json',\n      },\n    })\n\n    if (!response.ok) {\n      if (response.status === 404) {\n        return []\n      }\n      throw new Error(`HTTP ${String(response.status)}: ${response.statusText}`)\n    }\n\n    const data: unknown = await response.json()\n\n    if (!isValidProvidersResponse(data)) {\n      throw new Error('Invalid providers response format')\n    }\n\n    const envVars: AIProviderEnvVar[] = []\n\n    for (const provider of Object.values(data.providers)) {\n      envVars.push({\n        key: provider.token_env_var,\n        url: provider.url_env_var,\n      })\n    }\n\n    return envVars\n  } catch (error) {\n    console.warn(`Failed to fetch AI providers: ${error instanceof Error ? error.message : String(error)}`)\n    return []\n  }\n}\n\nexport const fetchAIGatewayToken = async ({\n  api,\n  siteId,\n}: {\n  api: NetlifyAPI\n  siteId: string\n}): Promise<AIGatewayTokenResponse | null> => {\n  try {\n    if (!api.accessToken) {\n      return null\n    }\n\n    // TODO: update once available in openApi\n    const url = `${api.scheme}://${api.host}/api/v1/sites/${siteId}/ai-gateway/token`\n\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${api.accessToken}`,\n        'Content-Type': 'application/json',\n      },\n    })\n\n    if (!response.ok) {\n      if (response.status === 404) {\n        return null\n      }\n      throw new Error(`HTTP ${String(response.status)}: ${response.statusText}`)\n    }\n\n    const data: unknown = await response.json()\n\n    if (!isValidTokenResponse(data)) {\n      throw new Error('Invalid response: missing token or url')\n    }\n\n    return {\n      token: data.token,\n      url: data.url,\n    }\n  } catch (error) {\n    console.warn(\n      `Failed to fetch AI Gateway token for site ${siteId}: ${error instanceof Error ? error.message : String(error)}`,\n    )\n    return null\n  }\n}\n\nexport const setupAIGateway = async (config: AIGatewayConfig): Promise<void> => {\n  const { api, env, siteID, siteURL } = config\n\n  if (siteID && siteID !== 'unlinked' && siteURL) {\n    const [aiGatewayToken, envVars] = await Promise.all([\n      fetchAIGatewayToken({ api, siteId: siteID }),\n      fetchAIProviders({ api }),\n    ])\n\n    if (aiGatewayToken) {\n      const aiGatewayContext = JSON.stringify({\n        token: aiGatewayToken.token,\n        url: `${siteURL}/.netlify/ai`,\n        envVars,\n      })\n      const base64Context = Buffer.from(aiGatewayContext).toString('base64')\n      env.AI_GATEWAY = { sources: ['internal'], value: base64Context }\n    }\n  }\n}\n\nexport const parseAIGatewayContext = (aiGatewayValue?: string): AIGatewayTokenResponse | undefined => {\n  try {\n    if (aiGatewayValue) {\n      const decodedContext = Buffer.from(aiGatewayValue, 'base64').toString('utf8')\n      const aiGatewayContext = JSON.parse(decodedContext) as AIGatewayTokenResponse\n      return aiGatewayContext\n    }\n  } catch {\n    // Ignore parsing errors - AI Gateway is optional\n  }\n  return undefined\n}\n"],"mappings":"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","names":[]}